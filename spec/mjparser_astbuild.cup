package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, VOID;
terminal NULL, MULTIPLY, EXTENDS, SUB, EQUAL, NOTEQUAL, GTEQUAL, LEEQUAL, LESS, GREATER, MOD;
terminal MINUS, DIVIDE, IMPLEMENTS, CLASS, INTERFACE, OR, AND, DIVEQ, SUBEQ, ADDEQ, MULEQ;
terminal ENUM, EQUALS, INCREMENT, DECREMENT, READ, LBRACKET, RBRACKET, CONST, DOT, MODEQ, NEW;
terminal Integer INT ;
terminal Boolean BOOL;
terminal Character CHAR;
terminal String IDENT ;
terminal IF, ELSE;

nonterminal MethodDeclList MethodDeclList;
nonterminal LParenCondition LParenCondition;
nonterminal VarDecl VarDecl;
nonterminal ConstDecl ConstDecl;
nonterminal WAss WAss;
nonterminal IncDec IncDec;
nonterminal EqualOp EqualOp;
nonterminal BoolOp BoolOp;
nonterminal Void Void;
nonterminal VarDeclSpec VarDeclSpec;
nonterminal VarSingleSpec VarSingleSpec;
nonterminal ConstType ConstType;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal VarType VarType;
nonterminal ConstDeclSpec ConstDeclSpec;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal AddOperations AddOperations;
nonterminal MulOperations MulOperations;
nonterminal MethVarDeclList MethVarDeclList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ExprNeg,Program, ProgName, Designator, MethodDecl, MethodTypeName, MethType, ConstFactor, ConstSingleSpec;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Type, Term, Expr, Factor, VarDeclList, DesignatorLbrack;
Program ::= (Program) PROG ProgName:p VarDeclList:V1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, V1, M2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} 
;

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}  
				|
				(ConstDeclNode) VarDeclList:V1 ConstDecl:C2 {: RESULT=new ConstDeclNode(V1, C2); RESULT.setLine(V1left); :}
				|
				(NoVarDecl) {: RESULT=new NoVarDecl(); :}/* epsilon */

				;

VarDecl ::= (VarDecl) VarType:V1 VarDeclSpec:V2 SEMI {: RESULT=new VarDecl(V1, V2); RESULT.setLine(V1left); :}
            ;
VarType ::= (VarTypeNode) Type:varType {: RESULT=new VarTypeNode(varType); RESULT.setLine(varTypeleft); :};
VarDeclSpec ::= (SingleVarNode)VarSingleSpec:V1 {: RESULT=new SingleVarNode(V1); RESULT.setLine(V1left); :}
                |
                (MultiVarNode)VarDeclSpec:V1 COMMA VarSingleSpec:V2 {: RESULT=new MultiVarNode(V1, V2); RESULT.setLine(V1left); :};

VarSingleSpec ::= (SingleSpecNode) IDENT:varName WAss:W1 {: RESULT=new SingleSpecNode(varName, W1); RESULT.setLine(varNameleft); :};

WAss ::= (NoAssNode) {: RESULT=new NoAssNode(); :}
            | (AssNode) EQUALS Factor:F1 {: RESULT=new AssNode(F1); RESULT.setLine(F1left); :}
            | (ArrayDeclNode) LBRACKET RBRACKET {: RESULT=new ArrayDeclNode(); :}
            | (AssNodeError) EQUALS error {:parser.log.debug("Uspesan oporavak od greske pri deklaraciji sa dodelom.");:} {: RESULT=new AssNodeError(); :}
            | (ArrayDeclNodeErr) LBRACKET error {:parser.log.debug("Uspesan oporavak od greske pri deklaraciji niza.");:} {: RESULT=new ArrayDeclNodeErr(); :}
            ;

ConstDecl ::= (ConstDecl) CONST ConstType:varType ConstDeclSpec:C1 SEMI {: RESULT=new ConstDecl(varType, C1); RESULT.setLine(varTypeleft); :}
            ;
ConstType ::= (ConstTypeNode) Type:varType {: RESULT=new ConstTypeNode(varType); RESULT.setLine(varTypeleft); :};

ConstDeclSpec ::= (SingleConstNode) ConstSingleSpec:C1 {: RESULT=new SingleConstNode(C1); RESULT.setLine(C1left); :}
                |
                (MultiConstNode) ConstDeclSpec:C1 COMMA ConstSingleSpec:C2 {: RESULT=new MultiConstNode(C1, C2); RESULT.setLine(C1left); :};

ConstSingleSpec ::= (ConstSingleSpecNode) IDENT:constName EQUALS ConstFactor:C1 {: RESULT=new ConstSingleSpecNode(constName, C1); RESULT.setLine(constNameleft); :};

//VarType ::= (VarType) Type:varType
//            |
//            (VarConstType) CONST Type:varType
//;



MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName:M1
			   LPAREN FormPars:F2 RPAREN MethVarDeclList:M3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, M3, S4); RESULT.setLine(M1left); :}
			   ;

MethodTypeName ::= (MethodTypeNameNode) MethType:retType IDENT:methName {: RESULT=new MethodTypeNameNode(retType, methName); RESULT.setLine(retTypeleft); :}

;

MethVarDeclList ::= (MethVarDeclarations) MethVarDeclList:M1 VarDecl:V2 {: RESULT=new MethVarDeclarations(M1, V2); RESULT.setLine(M1left); :}
				|
				(MethConstDeclNode) MethVarDeclList:M1 ConstDecl:C2 {: RESULT=new MethConstDeclNode(M1, C2); RESULT.setLine(M1left); :}
				|
				(MethNoVarDecl) {: RESULT=new MethNoVarDecl(); :}/* epsilon */
				;

MethType ::= (MethTypeNode) Type:typeName {: RESULT=new MethTypeNode(typeName); RESULT.setLine(typeNameleft); :}
        |
        (VoidNode) VOID {: RESULT=new VoidNode(); :}
;
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} ;

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} | (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= (FormalParamDecl) Type:T1 IDENT:I2 {: RESULT=new FormalParamDecl(T1, I2); RESULT.setLine(T1left); :} ;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
					|
				  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				  ;
Statement ::= (Assignment) Designator:dest EqualOp:E1 ExprNeg:e SEMI {: RESULT=new Assignment(dest, E1, e); RESULT.setLine(destleft); :}
			  |
			  (ErrAssignment)  error SEMI
			  {: parser.log.debug("Uspesan oporavak od greske."); :} {: RESULT=new ErrAssignment(); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
			  |
              (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			  |
			  (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
			  |
			  (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
			  |
              (BlockNode) LBRACE StatementList:S1 RBRACE {: RESULT=new BlockNode(S1); RESULT.setLine(S1left); :}
			  |
			  (ProcCall) Designator:func LPAREN ActualPars:A1 RPAREN SEMI {: RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); :}
			  |
			  (IncrementOnlyNode) Designator:inc INCREMENT SEMI {: RESULT=new IncrementOnlyNode(inc); RESULT.setLine(incleft); :}
			  |
			  (DecrementOnlyNode) Designator:dec DECREMENT SEMI {: RESULT=new DecrementOnlyNode(dec); RESULT.setLine(decleft); :}
              |
              (DeclNodeStmt) VarDecl:V1 {: RESULT=new DeclNodeStmt(V1); RESULT.setLine(V1left); :}
              ;

ExprNeg ::= (RegularExp) Expr:te {: RESULT=new RegularExp(te); RESULT.setLine(teleft); :}
         |
         (NegativeExp) MINUS Expr:te {: RESULT=new NegativeExp(te); RESULT.setLine(teleft); :}
         ;
Expr ::= (OppExpr) Expr:te AddOperations:A1 Term:t {: RESULT=new OppExpr(te, A1, t); RESULT.setLine(teleft); :}
		 |
		 (EqExpr) Expr:te EqualOp:E1 Term:t {: RESULT=new EqExpr(te, E1, t); RESULT.setLine(teleft); :}
         |
         (BoolExpr) Expr:te BoolOp:B1 Term:t {: RESULT=new BoolExpr(te, B1, t); RESULT.setLine(teleft); :}
         |
		 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		 ;

Term ::= (TermMulopNode) Term:T1 MulOperations:M2 Factor:t {: RESULT=new TermMulopNode(T1, M2, t); RESULT.setLine(T1left); :} | (TermNode) Factor:t {: RESULT=new TermNode(t); RESULT.setLine(tleft); :}
;

Factor ::= (ConstFactorNode) ConstFactor:C1 {: RESULT=new ConstFactorNode(C1); RESULT.setLine(C1left); :}
			|
		   (Var) Designator:d IncDec:I1 {: RESULT=new Var(d, I1); RESULT.setLine(dleft); :}
		    |
		   (ParenExpFactorNode) LPAREN Expr:e RPAREN {: RESULT=new ParenExpFactorNode(e); RESULT.setLine(eleft); :}
		    |
		   (FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		    |
		   (NewArrayNode) NEW Type:t LBRACKET Expr:e RBRACKET {: RESULT=new NewArrayNode(t, e); RESULT.setLine(tleft); :}
		   ;

ConstFactor ::= (ConstInt) INT:value {: RESULT=new ConstInt(value); RESULT.setLine(valueleft); :}
                |
                (ConstChar) CHAR:value {: RESULT=new ConstChar(value); RESULT.setLine(valueleft); :}
                |
                (ConstBool) BOOL:value {: RESULT=new ConstBool(value); RESULT.setLine(valueleft); :};

IncDec ::= (IncNode) INCREMENT {: RESULT=new IncNode(); :}
            |
            (DecNode) DECREMENT {: RESULT=new DecNode(); :}
            |
            (NothNode) {: RESULT=new NothNode(); :} /* epsilon */
;
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :} 
				| 
			   (NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
					|
					(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
					;

Designator ::= (DesignatorNode) IDENT:name {: RESULT=new DesignatorNode(name); RESULT.setLine(nameleft); :}
        |
        (DesignatorArrayMemberNode) DesignatorLbrack:D1 Expr:E2 RBRACKET {: RESULT=new DesignatorArrayMemberNode(D1, E2); RESULT.setLine(D1left); :}
;

DesignatorLbrack ::= (DesignatorLbrackNode) IDENT:name LBRACKET {: RESULT=new DesignatorLbrackNode(name); RESULT.setLine(nameleft); :};

AddOperations ::=
                 (Addop) PLUS {: RESULT=new Addop(); :}
                |(Subop) MINUS {: RESULT=new Subop(); :}
                ;
MulOperations ::=
                (Mulop) MULTIPLY {: RESULT=new Mulop(); :}
              | (Divop) DIVIDE {: RESULT=new Divop(); :}
              | (Modop) MOD {: RESULT=new Modop(); :}
              ;

EqualOp ::= (EqualNode) EQUALS {: RESULT=new EqualNode(); :}
            |(AddEq) ADDEQ {: RESULT=new AddEq(); :}
            |(SubEq) SUBEQ {: RESULT=new SubEq(); :}
            |(MulEq) MULEQ {: RESULT=new MulEq(); :}
            |(DivEq) DIVEQ {: RESULT=new DivEq(); :}
            ;
BoolOp ::=  (EqualBool) EQUAL {: RESULT=new EqualBool(); :}
            |(GteEq) GTEQUAL {: RESULT=new GteEq(); :}
            |(Greater) GREATER {: RESULT=new Greater(); :}
            |(Less) LESS {: RESULT=new Less(); :}
            |(LeEq) LEEQUAL {: RESULT=new LeEq(); :}
            |(NotEq) NOTEQUAL {: RESULT=new NotEq(); :}
            ;
